package ini

import (
	"encoding/json"
	"io/ioutil"
	"os"
	"strings"

	log "github.com/inconshreveable/log15"
	redis "gopkg.in/redis.v5"
	couch "github.com/dustin/go-couch"
)

// Conf struct generated by
// http://json2struct.mervine.net/
type Config struct {
	Db    Conf `json:"db"`
	Relay Conf `json:"relay"`
	Redis Conf `json:"redis"`
}

type Conf struct {
	Path   string `json:"path"`
	Port   string `json:"port"`
	Server string `json:"server"`
}

// Returns the client connection to the data server
func GetDataClient(co Config) (cl *redis.Client) {

	adr := strings.Join([]string{co.Redis.Server, co.Redis.Port}, ":")

	cl = redis.NewClient(&redis.Options{
		Addr:     adr,
		Password: "", // no password set
		DB:       0,  // use default DB
	})
	log.Info("data server client established")
	return
}

// Returns the couchdb database client (struct)
func GetDbClient(co Config) (db couch.Database){
	cDb := co.Db
	adr := strings.Join([]string{
		"http://",
		cDb.Server,
		":",
		cDb.Port,
		"/",
		cDb.Path,
	},"" )

	db, err := couch.Connect(adr)
	if(err != nil) {
		log.Error("Error on attempt to establish database connection")
		os.Exit(1)
	}
	log.Info("database client established")
	return
}
// Reads the config from file
func GetConfig(file string) (f []byte) {
	f, err := ioutil.ReadFile(file)
	if err != nil {
		log.Error("File error on read")
		os.Exit(1)
	}
	log.Info("config file read")

	return
}

// Parse the config file
func ParseConfig(f []byte) (co Config) {

	if err := json.Unmarshal(f, &co); err != nil {
		log.Error("Error on config parse to struct")
		os.Exit(1)
	}
	log.Info("json parsed")

	return
}

// a less verbose way to upload the config is tested
// under https://gist.github.com/wactbprot/5180dc617cbb232a3faf86a180fc6a52
func UploadConfig(cl *redis.Client, co Config) {
	cDb := co.Db
	db := map[string]string{
		"server": cDb.Server,
		"port":   cDb.Port,
		"path":   cDb.Path,
	}
	cl.HMSet("config:db", db)

	cRelay := co.Relay
	relay := map[string]string{
		"server": cRelay.Server,
		"port":   cRelay.Port,
		"path":   cRelay.Path,
	}
	cl.HMSet("config:db", relay)

	cRedis := co.Redis
	redis := map[string]string{
		"server": cRedis.Server,
		"port":   cRedis.Port,
		"path":   cRedis.Path,
	}
	cl.HMSet("config:db", redis)

}

func TestDataClient(cl *redis.Client) {

	pong, err := cl.Ping().Result()
	if err != nil {
		log.Error("client ping returns with error")
		os.Exit(1)
	}
	log.Info("test data server:", "ping", pong)
}

func TestDbClient(db couch.Database) {

	info, err :=  db.GetInfo()
	if err != nil {
		log.Error("db client test returns with error", err.Error())
		os.Exit(1)
	}
	log.Info("test db server:", "version", info.Version, "name", info.Name)
}
